// SPDX-License-Identifier: MIT
pragma solidity >=0.6.12 <0.9.0;

import "contracts/CommitReveal.sol" ;


contract Lottery is CommitReveal{
    struct Player {
        address addr; 
        uint ischoice; // 0 - 999
        
    }

    uint public choice ;
    uint public coin ;
    uint public T1 ;
    uint public T2 ;
    uint public startstade;
    uint public endstade ;

    address payable contractOwner; // คนเปิดหัว

    mapping(uint=>Player) public player ;
    mapping(address => uint) public addrtoplayer;


    constructor(uint _T1,uint  _T2) {
      T1 = _T1;
      T2 = _T2+T1;
      contractOwner = payable(msg.sender);
      player[5].addr = msg.sender;

    }
    
    

     function start(uint choice) public  payable {
        require(contractOwner == msg.sender);
        require(msg.value == 3 ether , " 3 ether");
        coin += 3 ether ;
        player[5].ischoice = choice;
        startstade = block.timestamp ;
        bytes32 hashChoice = getHash(bytes32(player[5].ischoice));
        commit(hashChoice);
        
        

     }

     function add(uint ischoice) public payable {
        require(block.timestamp <= startstade+T1);
        require(msg.sender != contractOwner, "you are contractOwner!");
        require(msg.value == 1 ether,"you need to pay 1 eth only");
        require(choice < 5 && choice >= 0 );
        
        require(player[choice].ischoice == 9,"wrong");
        player[choice].ischoice == 1 ;
        player[choice].addr == msg.sender ;
    

    }

     function stade1 (uint choice) public payable {
        require(block.timestamp <= startstade+T2);
        require(contractOwner == msg.sender) ;
        reveal(bytes32(_choice));
        address payable chamAddr = payable(player[_choice].addr);

        

        

     }
    



}




